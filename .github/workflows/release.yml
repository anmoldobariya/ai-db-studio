name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Typecheck
        run: pnpm run typecheck

      - name: Build Electron App (Linux)
        if: matrix.os == 'ubuntu-latest'
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          MODEL: ${{ secrets.MODEL }}
        run: pnpm run build:linux

      - name: Build Electron App (macOS)
        if: matrix.os == 'macos-latest'
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          MODEL: ${{ secrets.MODEL }}
        run: pnpm run build:mac

      - name: Build Electron App (Windows)
        if: matrix.os == 'windows-latest'
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          MODEL: ${{ secrets.MODEL }}
        run: pnpm run build:win

      - name: Upload Artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux
          path: |
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: error

      - name: Upload Artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dist-macos
          path: |
            dist/*.dmg
            dist/*.zip
          if-no-files-found: error

      - name: Upload Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dist-windows
          path: |
            dist/*.exe
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display downloaded files
        run: find artifacts -type f -name "*" | head -20

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          name: Release ${{ github.ref_name }}
          body: |
            üöÄ **AI DB Studio ${{ github.ref_name }}**
            
            A powerful AI-powered database management tool built with Electron.
            
            ## Features
            - ü§ñ AI-powered SQL generation via OpenRouter
            - üóÑÔ∏è Multi-database support (PostgreSQL, MySQL, SQLite, MongoDB)
            - üñ•Ô∏è Cross-platform desktop application
            - üìä Visual query results and data export
            - üîê Secure connection management
            
            ## Downloads
            
            Choose the appropriate download for your platform:
            
            ### Windows
            - **ai-db-studio-${{ github.ref_name }}-setup.exe** - Windows installer (recommended)
            
            ### macOS
            - **ai-db-studio-${{ github.ref_name }}.dmg** - macOS disk image (recommended)
            - **ai-db-studio-${{ github.ref_name }}-universal-mac.zip** - macOS zip archive
            
            ### Linux
            - **ai-db-studio-${{ github.ref_name }}.AppImage** - Linux AppImage (recommended)
            - **ai-db-studio_${{ github.ref_name }}_amd64.deb** - Debian/Ubuntu package
            
            ## Installation
            
            1. Download the appropriate file for your operating system
            2. Run the installer or open the application
            3. Configure your database connections
            4. Start using AI-powered SQL generation!
            
            ---
          draft: false
          prerelease: false